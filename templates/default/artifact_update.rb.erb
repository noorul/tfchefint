#!/opt/chef/embedded/bin/ruby
#
# artifact_update
#
# Authors:: Julian Dunn (<jdunn@opscode.com>)
#           CollabNet, Inc. (<dev-devops@forge.collab.net>)
#
# Copyright 2014, CollabNet, Inc.
# Copyright 2013, Opscode, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'net/http'
require 'syslog'
require 'rubygems'
require 'chef/config'
require 'chef/log'
require 'chef/rest'
require 'chef/data_bag'
require 'chef/data_bag_item'
require 'chef/mixin/shell_out'

include Chef::Mixin::ShellOut

if RUBY_VERSION < "1.9"
  print "Ruby 1.9.x is required to use this script. Please use the Ruby that comes with Chef."
  exit 1
end

# Use the same config as knife uses
Chef::Config.from_file(File.join(ENV['HOME'], '.chef', 'knife.rb'))

target_node_field = "Deploy To"

syslog = Syslog.open(::File::basename($0), Syslog::LOG_PID, Syslog::LOG_DAEMON | Syslog::LOG_LOCAL3)

tf_vars = ENV.to_hash.select { |k,v| k =~ /^tf_/ }
tf_original_flex_field_vars = tf_vars.select { |k,v| k=~ /^tf_original_flex_field_/ }
tf_updated_flex_field_vars = tf_vars.select { |k,v| k=~ /^tf_updated_flex_field_/ }

# Find the corresponding values for the vars of interest;
# We're looking for the value of the flex fields named:
#
# "Deploy To" -- which we set as 'target_node'

original_target_node, updated_target_node = nil

tf_original_flex_field_vars.each do |k, v|
  if v == target_node_field then
    original_target_node = tf_original_flex_field_vars[k.sub(/name/, 'value')]
    syslog.debug("original target_node set to " + original_target_node)
  end
end

if (original_target_node.nil?) then
  syslog.crit("Required 'Deploy To' field not defined in tracker; can't proceed")
  exit 1
end

tf_updated_flex_field_vars.each do |k, v|
  if v == target_node_field then
    updated_target_node = tf_updated_flex_field_vars[k.sub(/name/, 'value')]
    syslog.debug("updated target_node set to " + updated_target_node)
  end
end

if (updated_target_node.nil?) then
  syslog.crit("Required updated 'Deploy To' field not defined in tracker; can't proceed")
  exit 1
end

artifact_id = tf_vars['tf_updated_Id']
cmd = shell_out!("knife set_attribute node #{updated_target_node} tfchefint.artifact_id #{artifact_id}")

if ENV['DEBUG'] == '1' then
  puts cmd.stdout
end

# Exec knife to log into remote and run Chef once
cmd = shell_out!("knife ssh 'name:#{updated_target_node}' '[ -e /var/run/chef/client.pid ] && sudo /usr/bin/pkill -USR1 chef-client || sudo /usr/bin/chef-client --once'")

# If the above command fails an exception is thrown and if it succeeds and DEBUG
# is enabled the output is logged.
if ENV['DEBUG'] == '1' then
  puts cmd.stdout
end
